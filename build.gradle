buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
    dependencies {
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:1.0.10")
    }
}

plugins {

    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.springframework.boot' version '2.5.10'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'

    //querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
    id 'java'
}

group = 'com.hanghae99'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

//apply plugin: "com.ewerk.gradle.plugins.querydsl"

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    //fcm
    implementation 'com.google.firebase:firebase-admin:6.8.1'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'junit:junit:4.13.1'
    implementation 'junit:junit:4.13.1'
// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'


    compileOnly 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'


    //mysql
    implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.22'


    //socket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'


    implementation 'org.springframework.boot:spring-boot-devtools'

    // openvidu
    implementation 'io.openvidu:openvidu-java-client:2.21.1'

    compileOnly 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    runtimeOnly 'com.h2database:h2'

    // redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'


    //security
    implementation group: 'org.springframework.security', name: 'spring-security-core', version: '5.6.2'
    implementation group: 'org.springframework.security', name: 'spring-security-web', version: '5.6.2'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.4.0'

    //jpa
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.5.1'

    //model mapper
    implementation 'org.modelmapper:modelmapper:2.4.5'
    // https://mvnrepository.com/artifact/org.springframework.security.oauth/spring-security-oauth2
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.16.0'

    //gosn
    implementation 'com.google.code.gson:gson:2.8.7'

    //model mapper
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl
    implementation group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'


    //valid
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //log
//    implementation('org.slf4j:jcl-over-slf4j')
//    implementation('ch.qos.logback:logback-classic')

    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.4.8'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    implementation "com.querydsl:querydsl-core:${queryDslVersion}"


    //elk
    implementation 'org.springframework.data:spring-data-elasticsearch:4.2.2'


    //model mapper
    implementation 'org.modelmapper:modelmapper:2.4.5'
    // https://mvnrepository.com/artifact/org.springframework.security.oauth/spring-security-oauth2
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    implementation group: 'com.auth0', name: 'java-jwt', version: '3.16.0'

    //gosn
    implementation 'com.google.code.gson:gson:2.8.7'

    //model mapper
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl
    implementation group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.13'


    //valid
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //log
//    implementation('org.slf4j:jcl-over-slf4j')
//    implementation('ch.qos.logback:logback-classic')



    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: '2.4.8'
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    //testcode
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '2.5.0'
    testImplementation(platform('org.junit:junit-bom:5.8.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '5.6.0'

    //mail
    implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.4.7'
    implementation group: 'org.springframework', name: 'spring-context-support', version: '5.1.20.RELEASE'


    //error 해결>
    implementation group: 'org.javassist', name: 'javassist', version: '3.15.0-GA'

    //aop
    implementation 'org.springframework.boot:spring-boot-starter-aop'

}

//ascii

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    // 위에서 작성한 snippetsDir 디렉토리를 test의 output으로 구성하는 설정 -> 스니펫 조각들이 build/generated-snippets로 출력
    outputs.dir snippetsDir
    useJUnitPlatform()
}


asciidoctor { // asciidoctor 작업 구성
    dependsOn test // test 작업 이후에 작동하도록 하는 설정
    configurations 'asciidoctorExtensions' // 위에서 작성한 configuration 적용
    inputs.dir snippetsDir // snippetsDir 를 입력으로 구성

    // source가 없으면 .adoc파일을 전부 html로 만들어버림
    // source 지정시 특정 adoc만 HTML로 만든다.
//    sources{
//        include("**/index.adoc","**/common/*.adoc")
//    }
    sources{
        include("**/*.adoc","**/common/*.adoc")
    }
    // 특정 .adoc에 다른 adoc 파일을 가져와서(include) 사용하고 싶을 경우 경로를 baseDir로 맞춰주는 설정입니다.
    // 개별 adoc으로 운영한다면 필요 없는 옵션입니다.
    baseDirFollowsSourceFile()
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

// build 의 의존작업 명시
build {
    dependsOn copyDocument
}


// 참고사항 //
// 공식 문서에서는 위의 ascidoctor.doFirst부터 아래 내용은 없고 이와 같은 내용만 있습니다.
// 이렇게 하면 jar로 만들어 질때 옮겨지는 것으로 IDE로 돌릴 때는 build 폴더에서만 확인이 가능합니다.
// 위 방법을 사용하면 IDE에서도 static으로 옮겨진 것을 확인할 수 있습니다.
// 위에 방법을 사용하든 아래 방법을 사용하든 편한 선택지를 사용하시면 됩니다.
bootJar {
    dependsOn asciidoctor
    from ("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}


//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝